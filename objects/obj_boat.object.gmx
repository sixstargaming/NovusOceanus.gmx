<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>nBoatCycle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//instantiate variables
airRes = .1;
waterRes = .025;
hullPoints = 100;
healthPoints = 100;
turnSpeed = 1.5;
maxSpeed = 3.5;
maxReverseSpeed = -.7
accelRate = .05;
currentSpeed = 0;
inAir = 0;

// weapons
// 0 = default (not used)
// 1 = cannon
// 2 = shotgun
selectedWeapon = 1;
selectedWeaponText = "Cannon"
cannonAmmo = 30;

// GM vars
speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//load/end game on death
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//check determining factors for state machines


if (inAir)
{
    //use inAir state
}
else
{
    surfaceNormal();
}
    

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Fire selected weapon

switch(selectedWeapon)
{
    case 0:
    
    // Cannon
    case 1:
        if(self.cannonAmmo &gt; 0)
        {
            // Physics
            projectile = instance_create(x, y, obj_projectile);
            projectile.speed = 10;
            projectile.direction = point_direction(x, y, mouse_x, mouse_y);
            projectile.image_angle = projectile.direction;
            
            // Sound
            audio_play_sound(snd_cannonFire, 10, false);
            
            // Ammunition
            self.cannonAmmo = self.cannonAmmo - 1;
        }
        
        break;

    // Shotgun
    case 2:
        if(self.cannonAmmo &gt; 3)
        {
            // Physics
            var i;
            for (i = -10; i &lt;20; i += 10)
            {
                projectile = instance_create(x, y, obj_projectile);
                projectile.speed = 10;
                projectile.direction = point_direction(x + i, y + i, mouse_x, mouse_y);
                projectile.image_angle = projectile.direction;
            }
            
            // Sound
            audio_play_sound(snd_shotgunFire, 10, false);
            
            // Ammunition
            self.cannonAmmo = self.cannonAmmo - 3;
        }
        
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
